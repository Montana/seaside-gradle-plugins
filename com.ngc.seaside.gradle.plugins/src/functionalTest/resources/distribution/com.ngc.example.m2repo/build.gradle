import com.ngc.seaside.gradle.tasks.dependencies.PopulateMaven2Repository

buildscript {
    repositories {
        maven {
            url nexusConsolidated
        }
    }

    dependencies {
        // This allows us to test resolving build script configurations.
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}

plugins {
    id 'com.ngc.seaside.service-distribution'
}

group = 'com.ngc.seaside'
version = '1.0-SNAPSHOT'

ext {
    blocsCoreVersion = '2.1'
    blocsAuthorizationServiceVersion = '2.1'
    blocsScenarioServiceVersion = '2.1'
    blocsAuthenticationServiceVersion = '2.1'
    blocsAutoLoginServiceVersion = '2.1'
}

seasideDistribution {
    buildDir = 'build'
    distributionName = "${group}.${project.name}-${version}"
    distributionDir = "build/distribution/${group}.${project.name}-${version}"
    distributionDestDir = 'build/distribution/'
}



dependencies {
    bundles 'com.ngc.seacide:service.transport.api:1.1'
    blocs "com.ngc.blocs:api:${blocsCoreVersion}"
    blocs "com.ngc.blocs:file.impl.common.fileutilities:${blocsCoreVersion}"
    blocs "com.ngc.blocs:security.impl.common.securityutilities:${blocsCoreVersion}"
    blocs "com.ngc.blocs:jaxb.impl.common.jaxbutilities:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.session.impl.common.sessionservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:xml.resource.impl.common.xmlresource:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.log.impl.common.logservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.api:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.lifecycle.impl.common.basiclifecyclemgmtservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.event.impl.common.eventservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.resource.impl.common.resourceservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:notification.impl.common.notificationsupport:${blocsCoreVersion}"
    blocs "com.ngc.blocs:properties.resource.impl.common.propertiesresource:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.framework.impl.common.frameworkmgmtservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:component.impl.common.componentutilities:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.notification.impl.common.notificationservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.object.impl.common.basicobjectservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.thread.impl.common.threadservice:${blocsCoreVersion}"
    blocs "com.ngc.blocs:service.scenario.api:${blocsScenarioServiceVersion}"
    blocs "com.ngc.blocs:service.scenario.impl.common.scenarioserviceschema:${blocsScenarioServiceVersion}"
    blocs "com.ngc.blocs:service.scenario.impl.common.scenarioplaybackservice:${blocsScenarioServiceVersion}"
    blocs "com.ngc.blocs:service.scenario.impl.common.scenarioservice:${blocsScenarioServiceVersion}"
    blocs "com.ngc.blocs:service.scenario.impl.common.objectscenarioeventpublisher:${blocsScenarioServiceVersion}"
    blocs "com.ngc.blocs:service.authorization.api:${blocsAuthenticationServiceVersion}"
    blocs "com.ngc.blocs:service.authorization.impl.common.authorizationservice:${blocsAuthenticationServiceVersion}"
    blocs "com.ngc.blocs:service.authentication.api:${blocsAuthenticationServiceVersion}"
    blocs "com.ngc.blocs:service.authentication.impl.common.devauthenticationservice:${blocsAuthenticationServiceVersion}"
    blocs "com.ngc.blocs:service.login.impl.common.autologinservice:${blocsAutoLoginServiceVersion}"

    thirdParty 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    thirdParty 'com.google.guava:guava:17.0'
    thirdParty 'commons-io:commons-io:1.4'
    thirdParty 'log4j:log4j:1.2.17'
    thirdParty 'commons-beanutils:commons-beanutils:1.8.3'
    thirdParty 'commons-lang:commons-lang:2.4'
    thirdParty 'commons-collections:commons-collections:3.2.1'
    thirdParty 'commons-logging:commons-logging-osgi:1.1.1'
    thirdParty 'com.google.protobuf:protoc:3.2.0:linux-x86_64@exe'
    thirdParty 'org.sonarsource.scanner.api:sonar-scanner-api:2.9.0.887'
    //thirdParty 'org.sonarsource.scanner.api:sonar-scanner-api-parent:2.9.0.887@pom'
    //thirdParty 'com.google.guava:guava:22.0'
    //thirdParty 'com.google.inject:guice:4.0:no_aop@jar'

    platform "com.ngc.blocs:service.deployment.impl.common.autodeploymentservice:${blocsCoreVersion}"
    platform "org.eclipse.equinox:equinox-common:3.6.200.v20130402-1505"
    platform "org.eclipse.equinox:equinox-osgi-services:3.4.0.v20140312-2051"
    platform "org.eclipse.equinox:equinox-console:1.1.0.v20140131-1639"
    platform "org.eclipse.equinox:equinox-launcher:1.3.0.v20140415-2008"
    platform "org.apache.felix:gogo.runtime:0.10.0.v201209301036"
    platform "org.eclipse.equinox:equinox-registry:3.5.400.v20140428-1507"
    platform "org.apache.felix:gogo.command:0.10.0.v201209301215"
    platform "org.apache.felix:gogo.shell:0.10.0.v201212101605"
    platform "org.eclipse.equinox:equinox-ds:1.4.1-20120926-201320"
    platform "org.eclipse.equinox:equinox-util:1.0.500-20130404-1337"
    platform "org.eclipse.equinox:equinox-simpleconfigurator:1.1.0.v20131217-1203"
    platform "org.eclipse.equinox:equinox-osgi:3.10.0"
}

task testM2repo(type: PopulateMaven2Repository) {
    outputDirectory = project.file("${project.buildDir}/dependencies-m2")
    remoteRepository = project.repositories.getByName('NexusConsolidated')
    localRepository = mavenLocal()
    // Comment out the line below to resolve dependencies for all configurations.
    configurations = [project.configurations.getByName('thirdParty')]

    createDependencyReportFile = true
    dependencyInfoReportFile = project.file("${project.buildDir}/dependencies.tsv")

    deploymentScriptFile = project.file("${project.buildDir}/deploy.sh")
}
