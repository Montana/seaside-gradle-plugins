/**
 * Project level build for the seaside-gradle-parent gradle plugin.
 */
subprojects {

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven'

    group = 'com.ngc.seaside'
    version = '1.6.2-SNAPSHOT'

    ext {
        junitVersion = '4.12'
        aQuteVersion = '3.2.0'
        commonsIOVersion = '2.5'
        unbescapeVersion = '1.1.3.RELEASE'
        mockitoVersion = '2.7.14'
        blocsVersion = '2.1'
        gradleVersions = '0.15.0'
    }

    repositories {
        mavenLocal()

        maven {
            url nexusConsolidated
        }
    }

    //Augment the name of the jar to prepend the group.
    jar {
        archiveName = "${project.group}.${project.name}-${project.version}.jar"
    }

    // Enable the creation of sources JAR which is used when uploading to Nexus.
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }

    // Enable the creation of a Javadoc JAR which is used when uploading to Nexus.
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }

    // Disable the annoying doclint capability of Java 8 which causes builds to fail if the JavaDocs aren't right.
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    // Add the additional JAR artifacts, this results in them being included when uploading to Nexus.
    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    //define the nexus release repositories
    uploadArchives {
        repositories {
            mavenDeployer {
                // Use the main repo for full releases.
                repository(url: nexusReleases) {
                    // Make sure that nexusUsername and nexusPassword are in your
                    // ${gradle.user.home}/gradle.properties file.
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                // If the version has SNAPSHOT in the name, use the snapshot repo.
                snapshotRepository(url: nexusSnapshots) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }

    sourceSets {
        integrationTest {
            java.srcDir file('src/integrationTest/java')
            groovy.srcDir file('src/integrationTest/groovy')
            resources.srcDir file('src/integrationTest/resources')
        }

        functionalTest {
            java.srcDir file('src/functionalTest/java')
            groovy.srcDir file('src/functionalTest/groovy')
            resources.srcDir file('src/functionalTest/resources')
        }
    }

    task createClasspathManifest {
        def outputDir = file("$buildDir/$name")

        inputs.files sourceSets.main.runtimeClasspath
        outputs.dir outputDir

        doLast {
            outputDir.mkdirs()
            file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
        }
    }

    // Integration Dependencies
    dependencies {
        integrationTestCompile sourceSets.main.output
        integrationTestCompile configurations.testCompile
        integrationTestCompile sourceSets.test.output
        integrationTestRuntime configurations.testRuntime

        functionalTestCompile sourceSets.main.output
        functionalTestCompile configurations.testCompile
        functionalTestCompile sourceSets.test.output
        functionalTestRuntime configurations.testRuntime
    }

    tasks.getByName("test").group = "test"

    task integrationTest(type: Test, group: "test") {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    task functionalTest(type: Test, group: "test") {
        testClassesDir = sourceSets.functionalTest.output.classesDir
        classpath = sourceSets.functionalTest.runtimeClasspath
    }

    integrationTest.shouldRunAfter(test)
    functionalTest.shouldRunAfter(integrationTest)
    check.dependsOn(integrationTest, functionalTest)
}
