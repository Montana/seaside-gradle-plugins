buildscript {
   ext {
      bootstrapDirectory = "${project.buildDir}/bootstrapping"
      releaseInProgress = project.hasProperty('bootstrapRelease')

      getSelfDependencies = { ->
         // Put all files on in the bootstrapDirectory on the build classpath.
         // Don't use project.file since we want to configure the error message if the file is not found.
         def dir = new File("$bootstrapDirectory")
         if (!dir.isDirectory() || dir.list().length == 0) {
            throw new IllegalStateException(
                  "Cannot perform a release because project has not already been built, please run 'gradle prepareForRelease' first!")
         }

         project.file("$bootstrapDirectory")
               .list()
               .toList()
         // Remove .jar extension.
               .collect { it.substring(0, it.length() - 4) } // 4 = '.jar'.length()
      }
   }

   repositories {
      mavenLocal()

      maven {
         url nexusConsolidated
      }

      // Allows the build to reference its own artifact from a previous build.
      flatDir {
         dirs "${bootstrapDirectory}"
      }
   }

   dependencies {
      classpath 'com.github.ksoichiro:gradle-console-reporter:0.5.0'
      if (releaseInProgress) {
         getSelfDependencies().each { name ->
            classpath name: "$name"
         }
      }
   }
}

def nonPluginProjects = [project(':gradle.plugins'), project(':gradle.plugins.testutils'),
                         project(':gradle.plugins.base')]

if (releaseInProgress) {
   apply plugin: 'com.ngc.seaside.release.root'
}

/**
 * Project level build for the seaside-gradle-parent gradle plugin.
 */
subprojects {
   ext {
      isPlugin = !(project in nonPluginProjects)
   }

   apply plugin: 'java-library'
   apply plugin: 'groovy'
   apply plugin: 'maven'
   if (isPlugin) {
      apply plugin: 'java-gradle-plugin'
   }
   apply plugin: 'com.github.ksoichiro.console.reporter'

   group = 'com.ngc.seaside'
   version = '2.17.0'

   // Required in order to use implementation and api dependencies with groovy
   configurations {
      apiElements {
         outgoing.variants.getByName('classes').artifact(
               file: compileGroovy.destinationDir,
               type: ArtifactTypeDefinition.JVM_CLASS_DIRECTORY,
               builtBy: compileGroovy)
      }
   }

   ext {
      jaxbVersion = '2.3.0.1'
      junitVersion = '4.12'
      aQuteVersion = '4.0.0'
      commonsLang3Version = '3.5'
      commonsIOVersion = '2.5'
      unbescapeVersion = '1.1.3.RELEASE'
      mockitoVersion = '2.19.0'
      blocsVersion = '2.1.1'
      sonarQubeVersion = '2.5'
      dependencyUpdatesVersion = '0.15.0'
      consoleReporterVersion = '0.5.0'
      guavaVersion = '22.0'
      aetherVersion = '1.1.0'
      mavenVersion = '3.5.2'
   }

   repositories {
      mavenLocal()

      maven {
         url nexusConsolidated
      }
   }

   //Augment the name of the jar to prepend the group.
   jar {
      archiveName = "${project.group}.${project.name}-${project.version}.jar"
   }

   // Enable the creation of sources JAR which is used when uploading to Nexus.
   task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
      archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
   }

   // Enable the creation of a Javadoc JAR which is used when uploading to Nexus.
   task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
      archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
   }

   // Disable the annoying doclint capability of Java 8 which causes builds to fail if the JavaDocs aren't right.
   if (JavaVersion.current().isJava8Compatible()) {
      allprojects {
         tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
         }
      }
   }
   if (JavaVersion.current().isJava9Compatible()) {
      allprojects {
         tasks.withType(Javadoc) {
            options.addBooleanOption('html5', true)
         }
      }
   }

   // Add the additional JAR artifacts, this results in them being included when uploading to Nexus.
   artifacts {
      archives sourcesJar
      archives javadocJar
   }

   //define the nexus release repositories
   uploadArchives {
      repositories {
         mavenDeployer {
            // Use the main repo for full releases.
            repository(url: nexusReleases) {
               // Make sure that nexusUsername and nexusPassword are in your
               // ${gradle.user.home}/gradle.properties file.
               authentication(userName: nexusUsername, password: nexusPassword)
            }
            // If the version has SNAPSHOT in the name, use the snapshot repo.
            snapshotRepository(url: nexusSnapshots) {
               authentication(userName: nexusUsername, password: nexusPassword)
            }
         }
      }
   }

   sourceSets {
      integrationTest {
         java.srcDir file('src/integrationTest/java')
         groovy.srcDir file('src/integrationTest/groovy')
         resources.srcDir file('src/integrationTest/resources')
      }

      functionalTest {
         java.srcDir file('src/functionalTest/java')
         groovy.srcDir file('src/functionalTest/groovy')
         resources.srcDir file('src/functionalTest/resources')
      }
   }

   configurations {
      integrationTestCompile.extendsFrom testCompile
      integrationTestImplementation.extendsFrom testImplementation
      integrationTestRuntime.extendsFrom testRuntime
      functionalTestCompile.extendsFrom testCompile
      functionalTestImplementation.extendsFrom testImplementation
      functionalTestRuntime.extendsFrom testRuntime
      if (isPlugin) {
         // Allows functional tests to apply plugins from other projects
         testRuntimeClasspath.allDependencies.withType(ProjectDependency).all {
            dependencyProject.sourceSets {
               main {
                  gradlePlugin.pluginSourceSet.runtimeClasspath += compileClasspath + output
               }
            }
         }
      }
   }

   dependencies {
      integrationTestCompile sourceSets.main.output
      functionalTestCompile sourceSets.main.output
   }

   tasks.getByName("test").group = "test"

   task integrationTest(type: Test, group: "test") {
      testClassesDirs = sourceSets.integrationTest.output
      classpath = sourceSets.integrationTest.runtimeClasspath
   }

   task functionalTest(type: Test, group: "test") {
      testClassesDirs = sourceSets.functionalTest.output
      classpath = sourceSets.functionalTest.runtimeClasspath
   }

   integrationTest.shouldRunAfter(test)
   functionalTest.shouldRunAfter(integrationTest)
   check.dependsOn(integrationTest, functionalTest)

   tasks.withType(Test).all { testTask ->
      testTask.systemProperty 'nexusConsolidated', nexusConsolidated
      def systemProperties = ['javax.net.ssl.trustStore', 'http.proxyHost', 'http.proxyPort', 'http.nonProxyHosts',
                              'https.proxyHost', 'https.proxyPort', 'https.nonProxyHosts', 'sonar.host.url']
      for (String key : systemProperties) {
         String value = System.properties[key]
         if (value != null) {
            testTask.systemProperty(key, value)
         }
      }
   }

   task copyPlugin(type: Copy) {
      from jar
      into "$bootstrapDirectory"
   }

   task copyDependencies(type: Copy) {
      from configurations.compile
      into "$bootstrapDirectory"
   }

   task prepareForRelease(description: 'Prepares this project for a release.',
                          dependsOn: [copyPlugin, copyDependencies])
}

task clean() {
   doLast {
      delete "${project.buildDir}"
   }
}
