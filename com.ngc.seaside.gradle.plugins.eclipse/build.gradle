/*
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2018, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 */
configurations { dtd2java }

dependencies {
   api gradleApi()
   implementation localGroovy()
   implementation project(':gradle.plugins.base')
   implementation "com.google.guava:guava:$guavaVersion"
   implementation "commons-io:commons-io:$commonsIOVersion"
   implementation "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
   runtime "javax.activation:activation:1.1.1"
   dtd2java "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
   dtd2java "org.glassfish.jaxb:jaxb-xjc:$jaxbVersion"
   dtd2java "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
   dtd2java "javax.activation:activation:1.1.1"

   testRuntime project(':gradle.plugins.repository')
   testImplementation project(':gradle.plugins.testutils')
   testImplementation "junit:junit:$junitVersion"
   testImplementation "org.mockito:mockito-core:$mockitoVersion"
}

ext {
   jaxbTargetDir = file("${buildDir}/classes/javagen")
   dtdBasePackage = 'org.eclipse.updatesite'
   dtdFiles = [file("${projectDir}/src/main/resources/category.dtd"), file("${projectDir}/src/main/resources/feature.dtd")]
}

license {
   // Ignore generated sources from DTDs when checking licenses..
   exclude "${dtdBasePackage}/".replace('.', '/')
}

task dtd2java() {
   doFirst { jaxbTargetDir.mkdirs() }
   doLast {
      dtdFiles.each { dtd ->
         def dtdPackage = "${dtdBasePackage}." + dtd.name.take(dtd.name.lastIndexOf('.'))
         ant {
            taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.dtd2java.asPath)
            xjc(package: dtdPackage,
                destdir: jaxbTargetDir,
                schema: dtd,
                fork: true, {
                   arg line: '-XautoNameResolution -dtd'
                   jvmarg value: '-DenableExternalEntityProcessing=true'
                }
            )
         }
      }
   }
   inputs.files dtdFiles
   outputs.dir jaxbTargetDir
   compileJava.dependsOn dtd2java
   sourceSets.main.java.srcDirs jaxbTargetDir
}

