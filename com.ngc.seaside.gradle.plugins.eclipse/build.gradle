/*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
configurations { dtd2java }

dependencies {
   api gradleApi()
   implementation localGroovy()
   implementation project(':gradle.plugins.base')
   implementation "com.google.guava:guava:$guavaVersion"
   implementation "commons-io:commons-io:$commonsIOVersion"
   implementation "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
   runtime "javax.activation:activation:1.1.1"
   dtd2java "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
   dtd2java "org.glassfish.jaxb:jaxb-xjc:$jaxbVersion"
   dtd2java "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
   dtd2java "javax.activation:activation:1.1.1"

   testRuntime project(':gradle.plugins.repository')
   testImplementation project(':gradle.plugins.testutils')
   testImplementation "junit:junit:$junitVersion"
   testImplementation "org.mockito:mockito-core:$mockitoVersion"
}

ext {
   jaxbTargetDir = file("${buildDir}/classes/javagen")
   dtdBasePackage = 'org.eclipse.updatesite'
   dtdFiles = [file("${projectDir}/src/main/resources/category.dtd"), file("${projectDir}/src/main/resources/feature.dtd")]
}

license {
   // Ignore generated sources from DTDs when checking licenses..
   exclude "${dtdBasePackage}/".replace('.', '/')
}

task dtd2java() {
   doFirst { jaxbTargetDir.mkdirs() }
   doLast {
      dtdFiles.each { dtd ->
         def dtdPackage = "${dtdBasePackage}." + dtd.name.take(dtd.name.lastIndexOf('.'))
         ant {
            taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.dtd2java.asPath)
            xjc(package: dtdPackage,
                destdir: jaxbTargetDir,
                schema: dtd,
                fork: true, {
                   arg line: '-XautoNameResolution -dtd'
                   jvmarg value: '-DenableExternalEntityProcessing=true'
                }
            )
         }
      }
   }
   inputs.files dtdFiles
   outputs.dir jaxbTargetDir
   compileJava.dependsOn dtd2java
   sourceSets.main.java.srcDirs jaxbTargetDir
}

